<!--
***********************************************************************************************
Tvl.Java.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

This file defines the steps in the standard build process specific for Java projects.
For example, it contains the step that actually calls the javac compiler.  The remainder
of the build process is defined in Microsoft.Common.targets, which is imported by
this file.

Copyright (C) Sam Harwell. All rights reserved.
***********************************************************************************************
-->

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ImportByWildcardBeforeTvlJavaTargets Condition="'$(ImportByWildcardBeforeTvlJavaTargets)' == ''">true</ImportByWildcardBeforeTvlJavaTargets>
    <ImportByWildcardAfterTvlJavaTargets Condition="'$(ImportByWildcardAfterTvlJavaTargets)' == ''">true</ImportByWildcardAfterTvlJavaTargets>
  </PropertyGroup>

  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\$(MSBuildThisFile)\ImportBefore\*" Condition="'$(ImportByWildcardBeforeTvlJavaTargets)' == 'true' and exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\$(MSBuildThisFile)\ImportBefore')"/>

  <UsingTask Condition="'$(JavaBuildTaskPath)'==''" TaskName="Tvl.Java.BuildTasks.Javac" AssemblyFile="Tvl.Java.BuildTasks.dll" />

  <PropertyGroup>
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
    <DefaultLanguageSourceExtension>.java</DefaultLanguageSourceExtension>
    <Language>Java</Language>
    <GenerateTargetFrameworkAttribute>false</GenerateTargetFrameworkAttribute>
    <AllowedReferenceAssemblyFileExtensions Condition=" '$(AllowedReferenceAssemblyFileExtensions)' == '' ">
      .jar
    </AllowedReferenceAssemblyFileExtensions>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Default property values -->
    <SourceRelease Condition="'$(SourceRelease)'==''">Default</SourceRelease>
    <TargetRelease Condition="'$(TargetRelease)'==''">Default</TargetRelease>
    <DebugSymbols Condition="'$(DebugSymbols)'==''">Default</DebugSymbols>
    <ShowWarnings Condition="'$(ShowWarnings)'==''">True</ShowWarnings>
    <ShowAllWarnings Condition="'$(ShowAllWarnings)'==''">True</ShowAllWarnings>
    <TreatWarningsAsErrors Condition="'$(TreatWarningsAsErrors)'==''">None</TreatWarningsAsErrors>
    <OutputPath Condition="'$(OutputPath)'==''">bin\$(Configuration)\</OutputPath>
  </PropertyGroup>

  <!--
    The CreateManifestResourceNames target create the manifest resource names from the .RESX
    files.
    
        [IN]
        @(EmbeddedResource) - The list of EmbeddedResource items that have been pre-processed to add metadata about resource type
                              Expected Metadata "Type" can either be "Resx" or "Non-Resx"

        [OUT]
        @(EmbeddedResource) - EmbeddedResource items with metadata         
        
    For C# applications the transformation is like:

        Resources1.resx => RootNamespace.Resources1 => Build into main assembly
        SubFolder\Resources1.resx => RootNamespace.SubFolder.Resources1 => Build into main assembly
        Resources1.fr.resx => RootNamespace.Resources1.fr => Build into satellite assembly
        Resources1.notaculture.resx => RootNamespace.Resources1.notaculture => Build into main assembly

    For other project systems, this transformation may be different.
    -->
  <PropertyGroup>
    <CreateManifestResourceNamesDependsOn></CreateManifestResourceNamesDependsOn>
  </PropertyGroup>
  <Target
      Name="CreateManifestResourceNames"
      Condition="'@(EmbeddedResource)' != ''"
      DependsOnTargets="$(CreateManifestResourceNamesDependsOn)"
        >

    <ItemGroup>
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>

    <!-- Create manifest names for culture and non-culture Resx files, and for non-culture Non-Resx resources -->
    <CreateJavaManifestResourceName
          ResourceFiles="@(EmbeddedResource)"
          RootNamespace="$(RootNamespace)"
          Condition="'%(EmbeddedResource.ManifestResourceName)' == '' and ('%(EmbeddedResource.WithCulture)' == 'false' or '%(EmbeddedResource.Type)' == 'Resx')">

      <Output TaskParameter="ResourceFilesWithManifestResourceNames" ItemName="_Temporary" />

    </CreateJavaManifestResourceName>

    <!-- Create manifest names for all culture non-resx resources -->
    <CreateJavaManifestResourceName
          ResourceFiles="@(EmbeddedResource)"
          RootNamespace="$(RootNamespace)"
          PrependCultureAsDirectory="false"
          Condition="'%(EmbeddedResource.ManifestResourceName)' == '' and '%(EmbeddedResource.WithCulture)' == 'true' and '%(EmbeddedResource.Type)' == 'Non-Resx'">

      <Output TaskParameter="ResourceFilesWithManifestResourceNames" ItemName="_Temporary" />

    </CreateJavaManifestResourceName>

    <ItemGroup>
      <EmbeddedResource Remove="@(EmbeddedResource)" Condition="'%(EmbeddedResource.ManifestResourceName)' == ''"/>
      <EmbeddedResource Include="@(_Temporary)" />
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>

  </Target>

  <PropertyGroup>
    <!-- Provide a facility to override UseHostCompilerIfAvailable-->
    <UseHostCompilerIfAvailable Condition=" '$(UseHostCompilerIfAvailable)' == ''">true</UseHostCompilerIfAvailable>
  </PropertyGroup>

  <ItemGroup>
    <DocFileItem Include="$(DocumentationFile)" Condition="'$(DocumentationFile)'!=''"/>
  </ItemGroup>

  <ItemGroup Condition="'$(_DebugSymbolsProduced)' == 'true' and '$(PdbFile)' != ''">
    <_DebugSymbolsIntermediatePathTemporary Include="$(PdbFile)"/>
    <!-- Add any missing .pdb extension, as the compiler does -->
    <_DebugSymbolsIntermediatePath Include="@(_DebugSymbolsIntermediatePathTemporary->'%(RootDir)%(Directory)%(Filename).pdb')"/>
  </ItemGroup>

  <PropertyGroup>
    <CoreCompileDependsOn>_ComputeNonExistentFileProperty;_ComputeCompileInputs</CoreCompileDependsOn>
  </PropertyGroup>

  <Target Name="_ComputeCompileInputs"
          DependsOnTargets="$(_ComputeCompileInputsDependsOn)">

    <ItemGroup>
      <_SourceIncludeItems Include="@(SourceFolder->'%(RelativeDir)**\*.java')" />
    </ItemGroup>
    <PropertyGroup>
      <_SourceIncludeSpec>@(_SourceIncludeItems)</_SourceIncludeSpec>
    </PropertyGroup>
    <ItemGroup>
      <Compile Include="$(_SourceIncludeSpec)" />
    </ItemGroup>
    <!--<FindUnderPath Path="@(SourceFolder)" />-->

  </Target>

  <Target
      Name="CoreCompile"
      Inputs="$(MSBuildAllProjects);
                @(Compile);
                @(_CoreCompileResourceInputs);
                $(ApplicationIcon);
                $(AssemblyOriginatorKeyFile);
                @(ReferencePath);
                @(CompiledLicenseFile);
                @(EmbeddedDocumentation); 
                $(Win32Resource);
                $(Win32Manifest);
                @(CustomAdditionalCompileInputs)"
      Outputs="@(DocFileItem);
               @(CompileOutputs);
               @(_DebugSymbolsIntermediatePath);
               $(NonExistentFile);
               @(CustomAdditionalCompileOutputs)"
      Returns=""
      DependsOnTargets="$(CoreCompileDependsOn)"
    >
    <!-- These two compiler warnings are raised when a reference is bound to a different version
             than specified in the assembly reference version number.  MSBuild raises the same warning in this case,
             so the compiler warning would be redundant. -->
    <!--<PropertyGroup Condition="('$(TargetFrameworkVersion)' != 'v1.0') and ('$(TargetFrameworkVersion)' != 'v1.1')">
      <NoWarn>$(NoWarn);1701;1702</NoWarn>
    </PropertyGroup>-->

    <!-- If we are building in visual studio setting the JavacToolPath will prevent the inproc compiler from being used during compile-->
    <!--<PropertyGroup>
      <JavacToolPath Condition="'$(JavacToolPath)' == '' and '$(BuildingInsideVisualStudio)' != 'true'" >$(MsBuildToolsPath)</JavacToolPath>
    </PropertyGroup>-->

    <!--<ItemGroup Condition="'$(TargetingClr2Framework)'=='true'">
      <ReferencePath>
        <EmbedInteropTypes/>
      </ReferencePath>
    </ItemGroup>-->

    <PropertyGroup>
      <!-- If the user has specified AppConfigForCompiler, we'll use it. If they have not, but they set UseAppConfigForCompiler,
                 then we'll use AppConfig -->
      <AppConfigForCompiler Condition="'$(AppConfigForCompiler)' == '' and '$(UseAppConfigForCompiler)' == 'true'">$(AppConfig)</AppConfigForCompiler>
    </PropertyGroup>

    <!-- Condition is to filter out the _CoreCompileResourceInputs so that it doesn't pass in culture resources to the compiler -->
    <!--<Javac Condition=" '%(_CoreCompileResourceInputs.WithCulture)' != 'true' "
           AdditionalLibPaths="$(AdditionalLibPaths)"
           AddModules="@(AddModules)"
           AllowUnsafeBlocks="$(AllowUnsafeBlocks)"
           ApplicationConfiguration="$(AppConfigForCompiler)"
           BaseAddress="$(BaseAddress)"
           CheckForOverflowUnderflow="$(CheckForOverflowUnderflow)"
           CodePage="$(CodePage)"
           DebugType="$(DebugType)"
           DefineConstants="$(DefineConstants)"
           DelaySign="$(DelaySign)"
           DisabledWarnings="$(NoWarn)"
           DocumentationFile="@(DocFileItem)"
           EmitDebugInformation="$(DebugSymbols)"
           ErrorReport="$(ErrorReport)"
           FileAlignment="$(FileAlignment)"
           GenerateFullPaths="$(GenerateFullPaths)"
           KeyContainer="$(KeyContainerName)"
           KeyFile="$(KeyOriginatorFile)"
           LangVersion="$(LangVersion)"
           MainEntryPoint="$(StartupObject)"
           ModuleAssemblyName="$(ModuleAssemblyName)"
           NoConfig="true"
           NoLogo="$(NoLogo)"
           NoStandardLib="$(NoCompilerStandardLib)"
           NoWin32Manifest="$(NoWin32Manifest)"
           Optimize="$(Optimize)"
           OutputAssembly="@(IntermediateAssembly)"
           PdbFile="$(PdbFile)"
           Platform="$(PlatformTarget)"
           References="@(ReferencePath)"
           Resources="@(_CoreCompileResourceInputs);@(CompiledLicenseFile)"
           ResponseFiles="$(CompilerResponseFile)"
           Sources="@(Compile)"
           TargetType="$(OutputType)"
           ToolExe="$(JavacToolExe)"
           ToolPath="$(JavacToolPath)"
           TreatWarningsAsErrors="$(TreatWarningsAsErrors)"
           UseHostCompilerIfAvailable="$(UseHostCompilerIfAvailable)"
           Utf8Output="$(Utf8Output)"
           WarningLevel="$(WarningLevel)"
           WarningsAsErrors="$(WarningsAsErrors)"
           WarningsNotAsErrors="$(WarningsNotAsErrors)"
           Win32Icon="$(ApplicationIcon)"
           Win32Manifest="$(Win32Manifest)"
           Win32Resource="$(Win32Resource)"
               />-->
    <Javac References="@(ReferencePath)"
           ResponseFiles="$(CompilerResponseFile)"
           Sources="@(Compile)"
           ToolExe="$(JavacToolExe)"
           ToolPath="$(JavacToolPath)"
           Encoding="%(Compile.Encoding)"
           SourceRelease="$(SourceRelease)"
           TargetRelease="$(TargetRelease)"
           OutputPath="$(IntermediateOutputPath)"
           DebugSymbols="$(DebugSymbols)"
           SpecificDebugSymbols="$(SpecificDebugSymbols)"
           ShowWarnings="$(ShowWarnings)"
           ShowAllWarnings="$(ShowAllWarnings)"
           BuildArgs="$(BuildArgs)"
           Platform="$(Platform)"
           JvmRegistryBase="$(JvmRegistryBase)"
               >

      <Output TaskParameter="GeneratedClassFiles" ItemName="CompileOutputs" />
      <Output TaskParameter="GeneratedClassFiles" ItemName="FileWrites" />

    </Javac>

    <ItemGroup>
      <_CoreCompileResourceInputs Remove="@(_CoreCompileResourceInputs)" />
    </ItemGroup>

    <CallTarget Targets="$(TargetsTriggeredByCompilation)" Condition="'$(TargetsTriggeredByCompilation)' != ''"/>

  </Target>

  <Import Project="Tvl.Jvm.Common.targets" />

  <!--<Target Name="_SetTargetFrameworkMonikerAttribute" BeforeTargets="GenerateTargetFrameworkMonikerAttribute">
    <PropertyGroup>
      <TargetFrameworkMonikerAssemblyAttributeText Condition="'$(TargetFrameworkMoniker)' != '' and '$(TargetingClr2Framework)' != 'true'">
        // &lt;autogenerated /&gt;
        using System%3b
        using System.Reflection%3b
        [assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(&quot;$(TargetFrameworkMoniker)&quot;, FrameworkDisplayName = &quot;$(TargetFrameworkMonikerDisplayName)&quot;)]
      </TargetFrameworkMonikerAssemblyAttributeText>
    </PropertyGroup>
  </Target>-->

  <PropertyGroup>
    <Utf8Output Condition="'$(UseHostCompilerIfAvailable)' == 'false' and '$(Utf8Output)' == ''">true</Utf8Output>

    <!-- NoCompilerStandardLib maps to the compiler's /nostdlib option. By default we always
           want that switch to be passed to the compiler so that either we or the user
           provides the references
           NoStdLib on the other hand indicates that the user doesn't want standard references
           so only if NoStdLib isn't set to true, will we provide the standard references
      -->
    <NoCompilerStandardLib Condition=" '$(NoCompilerStandardLib)' == '' ">true</NoCompilerStandardLib>
  </PropertyGroup>

  <!-- Add any "automatic" compiler references that need to be resolved when NoCompilerStandardLib is set
         but the user hasn't told us to not include standard references -->
  <!-- Note that unlike VB, C# does not automatically locate System.dll as a "standard library"
          instead the reference is always passed from the project. Also, for mscorlib.dll 
          we need to provide the explicit location in order to maintain the correct behaviour
    -->
  <!--<ItemGroup Condition=" '$(NoCompilerStandardLib)' == 'true' and '$(NoStdLib)' != 'true' ">
    <_ExplicitReference Include="$(FrameworkPathOverride)\mscorlib.dll" />
  </ItemGroup>-->

  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\$(MSBuildThisFile)\ImportAfter\*" Condition="'$(ImportByWildcardAfterTvlJavaTargets)' == 'true' and exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\$(MSBuildThisFile)\ImportAfter')"/>

</Project>
